/*
 * This file is a TaskJuggler project template. It can be used as a
 * starting point for planning a rather large project. It is primary
 * designed for a product development project but can be easily
 * adapted to other types of projects. The structure of the project
 * plan was derived from the excellent book "Fundamentals of
 * Technology Project Managment" by Collen Carton with Erika
 * McCulloch.
 *
 * You can put your own templates in
 *
 * ${KDEHOME}/share/apps/taskjuggler/Templates/${LANG}/
 *
 * Permission to read, modify and distribute this file without any
 * restrictions is granted.
 *
 * Please see the TaskJuggler manual for a more detailed
 * description of the various syntax elements. You can find more
 * information about TaskJuggler at http://www.taskjuggler.org!
 */
project yourID "Your Project" "1.0" 2009-06-06 - 2009-12-03 {
  # Hide the clock time. Only show the date.
  timeformat "%Y-%m-%d"
  # The currency for all money values is EUR.
  currency "EUR"

  now 2009-06-17

  # We want to compare the baseline scenario, to one with a slightly
  # delayed start.
  scenario plan "Plan" {
    scenario delayed "Delayed"
  }
}

# Put your macros here.
# Macro with paramater:
# macro foo [
#   task foo { }
# ]
# Macro with one paramater
# macro bar [
#   task ${1} { }

# Put your flag declarations here. You can flag task, resources and
# accounts to use them as filter criteria when generating reports.
# flags important, dontcare
flags team

# The daily default rate of all resources. This can be overriden for each
# resource. We specify this, so that we can do a good calculation of
# the costs of the project.
rate 300.0

# Put company holidays here
# vacation "Holidays" 2005-12-24 - 2006-01-02

# Put your resource definitions here:
# resource dev "Developers" {
#   resource dev1 "Paul Smith" { rate 330.0 }
#   resource dev2 "Sébastien Bono"
#   resource dev3 "Klaus Müller" { vacation 2005-02-01 - 2005-02-05 }
# }
# This resource does not do any work.
# resource confRoom "Conference Room" {
#   efficiency 0.0
# }

resource people "People" {

}
resource equipment "Equipment" {
  efficiency 0.0
}

# In order to do a simple profit and loss analysis of the project we
# specify accounts. One for the development costs, one for the
# documentation costs and one account to credit the customer payments
# to.
account costs "Costs" cost
account rev "Payments" revenue

# Now we specify the work packages. The whole project is described as
# a task that contains sub tasks. These sub tasks are then broken down
# into smaller tasks and so on. The innermost tasks describe the real
# work and have resources allocated to them. Many attributes of tasks
# are inherited from the enclosing task. This saves you a lot of
# writing.
task myProject "My Project" {
  start 2009-06-06

  # All work related costs will be booked to this account unless the
  # sub tasks specifies it differently.
  account costs

  task planning "Planning Phase" {
    task concept "Conception" { start 2009-06-06 duration 5d complete 100 }
    task rfp "Interfaces definition" { duration 5d depends !concept complete 100 }
    task greenlight "Dev part1" { duration 5d depends !concept complete 90 }
    task definition "Dev part2" { duration 5d delayed:duration 7d depends !greenlight complete 20 }
    task approval "Dev part3" { duration 5d depends !definition complete 0 }
    task kickoff "Pre-tests" { duration 5d depends !approval complete 0 }
    task plan "Auqlification" { duration 5d depends !kickoff complete 0 }
    task approach "Acceptation" { duration 5d depends !plan complete 0 }
  }
}

taskreport "taskreport " {
    headline "Gantt report."
}


svggantttaskreport "ganttreport_3.svg" {
    headline "Gantt report."
    scenarios plan
    taskroot myProject.planning
    hidelinks 1
    taskbarprefix "$${name}"
    taskbarpostfix "$${completed}"
    svggantttaskreport "ganttreport_4.svg" {
        headline "Gantt report with links."
        hidelinks 0
    }
}

